; **********************************************************************
; * _readd.a - 
; *
; * Copyright (C) 1988,1989 Aldus Corporation.  All rights reserved.
; * Copyright (C) 1989-1990 Microsoft Corporation.
; *
; * Company confidential.
; *
; *********************************************************************/

    title	_readd - read next directory entry
    subttl	Copyright (C) 1985 Aldus Corporation.  All rights reserved.
    page	60,132

; *********************************************************************/
;  History
;	04 jan 90	peterbe		Save/Restore DTA in pOldDta
;	01 aug 89	peterbe		Standardized tab settings
;
;  $Revision:   1.2  $
;  $Date:   28 Oct 1988 15:23:52  $
;  $Author:   dar  $
;
; 01/31/86 - v000 - tcj - original implementation in microsoft's CMACROS

; *********************************************************************/
; abstract
;
; this module contains a c-language callable routine for invoking the dos
; function 0x4F, find next.
;
; *********************************************************************/


; system includes
.xlist
?PLM = 1				;yes, plm conventions
?WIN = 1				;yes, follow windows calling conventions
		include	cmacros.inc
.list
	page

; _readd - read next directory entry.
;
; c-language declaration:
;
;	int _readd(buf)
;       DIRDATA far *buf;	/* pointer to directory data buffer.
;				 * must be the same buffer as passed
;				 * to the _opend.
;				 */
;
;the DIRDATA structure is defined in the header file \include\doslib.h.
;
; returns:
;   zero if no error or dos error code as value of the function.
;   if no error was encountered, "buf" is filled in with information
;   regarding the next matching file.
;
; reference:
;   ibm pc dos version 2.00 manual, page d-50.

sBegin	CODE
assumes	CS, CODE

cProc	dos_readd,<FAR,PUBLIC>,<ds>
	parmD	pDirData

	localD	pOldDta			; save old DTA here

cBegin
	mov	ah,2fh			;get current DTA
	int	21h			; in ES:BX
	mov	word ptr pOldDta,bx	; save offset and
	mov	word ptr pOldDta+2,es	; segment on stack

	lds	dx,pDirData		;load ds:dx with buffer address
	mov	ah,1ah			;set up for "set dta" dos call
	int	21h			;do it
	mov	ah,4fh			;set up for "find next" dos call
	int	21h			;do it
	jb	$1			;return error if error
	xor	ax,ax			;else return success
$1:
	push	ax			; save return code
	lds	dx,pOldDta		;Now restore DTA
	mov	ah,1ah			;set up for "set dta" dos call
	int	21h			;do it
	pop	ax			; restore return value

	cld				;take no chances with dos
cEnd
sEnd
end
