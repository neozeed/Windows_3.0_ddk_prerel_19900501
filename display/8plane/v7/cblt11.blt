;	Copyright February, 1990  HEADLAND TECHNOLOGY, INC.
        page
	?_pub	cblt11
cblt11	proc	near
 
	mov	ax,es
	mov	ds,ax
	assumes	ds,nothing


	subttl	Compile - Outer Loop
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Create the outerloop code.  The first part of this code will save
;	the scan line count register, destination pointer, and the source
;	pointer (if there is a source).
;
;
;	The generated code should look like:
;
;		push	cx		;Save scan line count
;		push	di		;Save destination pointer
;	<	push	si	>	;Save source pointer
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

	mov	al,I_PUSH_CX		;Save scan line count
	mov	ah,I_PUSH_DI		;Save destination ptr
	stosw

	mov	bl,gl_flag0
	test	bl,F0_SRC_PRESENT	;Is a source needed?
	jz	cblt11_2020		;  No

	mov	al,I_PUSH_SI		;  Yes, save source pointer
	stosb

cblt11_2020:



	subttl	Compile - Monochrome Pattern Fetch
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Set up any pattern fetch code that might be needed.
;	The pattern code has many fixups, so it isn't taken from a
;	template.  It is just stuffed as it is created.
;
;
;	Entry:	None
;
;	Exit:	DH = pattern
;
;	Uses:	AX,BX,CX,DH,flags
;
;
;	For monochrome brushes:
;
;	    mov     cx,ds		;Save DS
;	    lds     bx,gl_lp_pattern	;DS:BX --> brush
;	    mov     dh,7[bx]		;Get next brush byte
;	    mov     al,ss:[1234h]	;Get brush index
;	    add     al,gl_direction	;Add displacement to next byte (+1/-1)
;	    and     al,00000111b	;Keep it in range
;	    mov     ss:[1234h],al	;Store displacement to next byte
;	    mov     ds,cx		;Restore DS
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

	?_pub	cblt11_pattern_fetch
cblt11_pattern_fetch:

	test	bl,F0_PAT_PRESENT	;Is a pattern needed?
	jz	cblt11_initial_byte_fetch ;  No, skip pattern code

	test	bl,F0_SRC_PRESENT
	jz	@f

	mov	ax,I_MOV_CX_DS		;mov cx,ds
	stosw
@@:
	mov	al,I_SS_OVERRIDE
	stosb
	mov	ax,I_LDS_BX_MEM
	stosw
	lea	ax,gl_lp_pattern
	stosw

	mov	ax,I_MOV_DH_BX_DISP8	;mov dh,gl_pat_row[bx]
	stosw

	mov	dx,di			;Save address of the brush index
	mov	al,gl_pat_row		;Set initial pattern row
	mov	bh,00000111b		;Set brush index mask
	and	al,bh			;Make sure it's legal at start
	stosb

	mov	al,I_SS_OVERRIDE
	mov	ah,I_MOV_AL_MEM
	stosw				;mov al,ss:[xxxx]
	mov	ax,dx
	stosw

PATTERN_STEP1	equ	SIZE_PATTERN/8

	mov	al,I_ADD_AL_BYTE_I
	mov	ah,PATTERN_STEP1
	stosw				;add al,BrushIndexStep

PATTERN_MASK1	equ	SIZE_PATTERN*SIZE_PATTERN/8-1

	mov	al,I_AND_AL_BYTE_I
	mov	ah,PATTERN_MASK1	;and al,BrushIndexMask
	stosw

	mov	al,I_SS_OVERRIDE
	mov	ah,I_MOV_MEM_AL
	stosw				;mov ss:[xxxx],al
	mov	ax,dx
	stosw

	test	bl,F0_SRC_PRESENT
	jz	@f

	mov	ax,I_MOV_DS_CX		;mov ds,cx
	stosw
@@:
	subttl	Compile - Initial Byte Fetch
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Create the initial byte code.  This may consist of one or two
;	initial fetches (if there is a source), followed by the required
;	logic action.  The code should look something like:
;
;	BLTouterloop:
;	<	xor	bh,bh	    >	;Clear previous unused bits
;
;	;	Perform first byte fetch
;
;	<	lodsb		    >	;Get source byte
;	<	phase alignment     >	;Align bits as needed
;
;	;	If an optional second fetch is needed, perform one
;
;	<	lodsb		    >	;Get source byte
;	<	phase alignment     >	;Align bits as needed
;
;		logical action		;Perform logical action required
;
;		mov	ah,es:[di]	;Get destination
;		and	ax,cx		;Saved unaltered bits
;		or	al,ah		;  and mask in altered bits
;		stosb			;Save the result
;
;
;	The starting address of the first fetch/logical combination will be
;	saved so that the code can be copied later instead of recreating it
;	(if there are two fecthes, the first fetch will not be copied)
;
;	The length of the code up to the masking for altered/unaltered bits
;	will be saved so the code can be copied into the inner loop.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


	?_pub	cblt11_initial_byte_fetch
cblt11_initial_byte_fetch:

	xor	dx,dx

	or	dh,gl_phase_h		;Is the phase 0? (also get the phase)
	jz	cblt11_3020		;  Yes, so no phase alignment needed

	mov	ax,I_XOR_BH_BH		;Clear previous unused bits
	stosw

cblt11_3020:
	mov	gl_fetch,di		;Save starting address of action

	test	gl_flag0,F0_SRC_PRESENT ;Is there a source?
	jz	cblt11_4000		;  No, don't generate fetch code



; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Generate the required sequence of instructions for a fetch
;	sequence.  Only the minimum code required is generated.
;
;	The code generated will look something like the following:
;
;	BLTfetch:
;	<	lodsb		      > ;Get the next byte
;
;	;	If the phase alignment isn't zero, then generate the minimum
;	;	phase alignment needed.  RORs or ROLs will be generated,
;	;	depending on the fastest sequence.  If the phase alignment
;	;	is zero, than no phase alignment code will be generated.
;
;	<	ror	al,1	      > ;Rotate as needed
;	<	ror	al,1	      > ;Rotate as needed
;	<	ror	al,1	      > ;Rotate as needed
;	<	ror	al,1	      > ;Rotate as needed
;	<	mov	ah,al	      > ;Mask used, unused bits
;	<	and	ax,gl_first_mask  > ;Mask used, unused bits
;	<	or	al,bh	      > ;Mask in old unused bits
;	<	mov	bh,ah	      > ;Save new unused bits
;
;
;	The nice thing about the above is it is possible for the fetch to
;	degenerate into a simple LODSB instruction.
;
;	If this was a iAPX80286 implementation, if would be faster to
;	make three or four rotates into a "ror al,n" instruction.
;
;	Currently:	BL = gl_the_flags
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


	mov	al,I_LODSB		;Generate source fetch
	stosb


	subttl	Compile - Phase Alignment
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Generate the phase alignment if any.
;
;	It is assumed that AL contains the source byte
;
;	Currently:
;
;	    DH = phase alignment
;
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

	xor	cx,cx			;Might have garbage in it
	or	dh,dh			;Any phase alignment?
	jz	cblt11_3280		;  No, so skip alignment

	push	sp
	pop	ax
	cmp	ax,sp			;Can we do ROL AL,#
	jne	cblt11_rol1		;  No

	mov	ax,I_ROL_AL_N
	stosw
	mov	al,dh
	stosb
	jmp	short cblt11_roln

cblt11_rol1:
	mov	cl,dh			;Get horizontal phase for rotating
	mov	ax,I_ROL_AL_1		;Assume rotate left n times
	cmp	cl,5			;4 or less rotates?
	jb	cblt11_3260		;  Yes

	mov	cl,8			;  No, compute ROR count
	sub	cl,dh			;  1:7 2:6 3:5 4:4
	mov	ax,I_ROR_AL_1

cblt11_3260:
	rep	stosw			;Stuff the phase alignment rotates
					;  then the phase alignment code
cblt11_roln:

; GLM-- don't generate unnecessary masking code
	mov	ax,gl_align_mask
	or	ah,ah
	jz	cblt11_glm1

	mov	ax,I_MOV_AH_AL
	stosw

	mov	al,I_AND_AX_WORD_I
	stosb
	mov	ax,gl_align_mask
	stosw

	mov	ax,I_OR_AL_BH
	stosw

	mov	ax,I_MOV_BH_AH
	stosw

cblt11_glm1:
cblt11_3280:
	test	gl_extra_fetch,-1	;Generate another fetch?
	jz	cblt11_4000		;  No

;	A second fetch needs to be stuffed.  Copy the one just created.

	mov	si,di			;Get start of fetch logic
	xchg	si,gl_fetch		;Set new start, get old

	mov	cx,di			;Compute how long fetch is
	sub	cx,si			;  and move the bytes

	rep	movs bptr es:[di],es:[si]

	subttl	Compile - ROP Generation
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Create the logic action code
;
;	The given ROP will be converted into the actual code that
;	performs the ROP.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


SRC_IN_AL 	equ	00000001b	;Source field is in AL		(0)
DEST_IN_AH	equ	00000010b	;Destination field is in AH	(1)
PUSH_POP_FLAG	equ	00000100b	;Next push/pop is a pop 	(1)


;	Copy the ROP template into the BLT

cblt11_4000:
	mov	ax,gl_operands		;Get back rop data
	mov	bl,ah			;Get count of number of bits to move
	and	bx,HIGH ROPLength
	shr	bx,1
	shr	bx,1
	mov	cl,bptr roptable+256[bx];Get length into cx
	xor	ch,ch			;
	errnz	ROPLength-0001110000000000b

	mov	bx,ax			;Get offset of the template
	and	bx,ROPOffset
	jz	cblt11_4020		;Source copy

	lea	si,roptable[bx] 	;--> the template
	rep	movs bptr es:[di],cs:[si]

cblt11_4020:
	mov	bx,ax			;Keep rop around
	or	ah,ah			;Generate a negate?
	jns	cblt11_4040		; No

	mov	ax,I_NOT_AL
	stosw

cblt11_4040:
	mov	gl_store,di		;Save end of fetch/logic operation



	subttl	Compile - Mask And Save
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Generate code to mask and save the result.  If the destination
;	isn't in a register, it will be loaded from ES:[DI] first.  The
;	mask operation will then be performed, and the result stored.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


; GLM-- don't generate unnecessary masking code
	mov	ax,gl_first_mask
	or	ah,ah
	jz	cblt11_glm2

	mov	al,I_ES_OVERRIDE 	;Load destination in AH
	stosb
	mov	ax,I_MOV_AH_DEST
	stosw

	mov	al,I_AND_AX_WORD_I
	stosb
	mov	ax,gl_first_mask
	stosw

	mov	ax,I_OR_AL_AH
	stosw

cblt11_glm2:
	mov	al,I_STOSB
	stosb

	mov	gl_endop,di		;Save end of fetch/logic/store operation



	subttl	Compile - Inner Loop Generation
	page

;	Now for the hard stuff; The inner loop (said with a "gasp!").
;
;	If there is no innerloop, then no code will be generated
;	(now that's fast!).

	mov	dx,gl_inner_count 	;Get the loop count
	or	dx,dx			;If the count is null
;	jz	cblt11_6000
	jz	cblt11_5140		;  don't generate any code.



; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	We have something for a loop count.  If this just happens to be
;	a source copy (S) with a phase of zero, then the innerloop degenerates
;	to a repeated MOVSB instruction.  This little special case is
;	worth checking for and handling!
;
;	Also, if this is one of the special cases {P, Pn, DDx, DDxn}, then it
;	will also be special cased since these are all pattern fills (pattern,
;	not pattern, 0, 1).
;
;	The same code can be shared for these routines, with the exception
;	that patterns use a STOSx instruction instead of a MOVSx instruction
;	and need a value loaded in AX
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

	mov	bl,bptr (Rop)		;Get the raster op
	test	bl,EPS_INDEX		;Can this be special cased?
	jnz	cblt11_5500		;  No

	errnz	<HIGH EPS_INDEX>
	errnz	SPEC_PARSE_STR_INDEX	;The special case index must be 0

	test	bl,EPS_OFF		;Is this a source copy
	jz	cblt11_5040		;  Yes

	errnz	<SOURCE_COPY AND 11b>	;Offset for source copy must be 0



; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	We should have one of the following fill operations:
;
;		P	- Pattern
;		Pn	- NOT pattern
;		DDx	- 0 fill
;		DDxn	- 1 fill
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

	mov	ax,I_MOV_AL_0FFH 	;Assume this is a 0 or 1 fill

	test	bl,01h			;Is it 0 or 1 fill?
	jz	cblt11_5020		;  Yes, initialize AX with 0FFh

	mov	ax,I_MOV_AL_DH		;  No,	initialize AX with pattern

	errnz	   PAT_COPY-0000000000100001b
	errnz	NOTPAT_COPY-0000000000000001b
	errnz	 FILL_BLACK-0000000001000010b
	errnz	 FILL_WHITE-0000000001100010b

cblt11_5020:
	stosw

	mov	ax,I_MOV_AH_AL
	stosw

	mov	si,I_STOSB		;Set up for repeated code processor
	test	bl,LogPar		;If Pn or 0, then complement pattern
	jnz	cblt11_5060		;  Is just P or 1

	errnz	<HIGH LogPar>
	mov	ax,I_NOT_AX		;  Is Pn or 0, complement AX
	stosw
	jmp	short cblt11_5060

	errnz	   PAT_COPY-00100001b
	errnz	NOTPAT_COPY-00000001b
	errnz	 FILL_BLACK-01000010b
	errnz	 FILL_WHITE-01100010b




;	This is a source copy.	The phase must be zero for a source copy
;	to be condensed into a REP MOVSx.

cblt11_5040:
	test	gl_phase_h,0FFh		;Is horizontal phase zero?
	jnz	cblt11_5500		;  No, can't condense source copy

	mov	si,I_MOVSB		;Set register for moving bytes


; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	This is a source copy or pattern fill.	Process an odd byte with
;	a MOVSB or STOSB, then process the rest of the bytes with a REP
;	MOVSW or a REP STOSW.  If the REP isn't needed, leave it out.
;
;	Don't get caught on this like I did!  If the direction of the
;	BLT is from right to left (decrementing addresses), then both
;	the source and destination pointers must be decremented by one
;	so that the next two bytes are processed, not the next byte and
;	the byte just processed.  Also, after all words have been processed,
;	the source and destination pointers must be incremented by one to
;	point to the last byte (since the last MOVSW or STOSW would have
;	decremented both pointers by 2).
;
;	If the target machine is an 8086, then it would be well worth the
;	extra logic to align the fields on word boundaries before the MOVSxs
;	if at all possible.
;
;	The generated code should look something like:
;
;	WARP8:				     ;This code for moving left to right
;		movsb			     ;Process an odd byte
;		ld	cx,gl_inner_count/2  ;Set word count
;		rep			     ;If a count, then repeat is needed
;		movsw			     ;Move words until done
;
;
;	WARP8:				     ;This code for moving left to right
;		movsb			     ;Process an odd byte
;		dec	si		     ;adjust pointer for moving words
;		dec	di
;		ld	cx,gl_inner_count/2  ;Set word count
;		rep			     ;If a count, then repeat is needed
;		movsw			     ;Move words until done
;		inc	si		     ;adjust since words were moved
;		inc	di
;
;
;	Of course, if any part of the above routine isn't needed, it isn't
;	generated (i.e. the generated code might just be a single MOVSB)
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

cblt11_5060:
	shr	dx,1			;Byte count / 2 for words
	jnc	cblt11_5080		;  No odd byte to move

	mov	ax,si			;  Odd byte, move it
	stosb

cblt11_5080:
	jz	cblt11_5140		;No more bytes to move

	xor	bx,bx			;Flag as stepping from left to right

	cmp	gl_direction,INCREASING	;Moving from left to right?
	je	cblt11_5100		;  Yes

	mov	al,I_DEC_SI
	mov	ah,I_DEC_DI		;Decrement both pointers
	stosw
	mov	bl,I_INC_SI
	mov	bh,I_INC_DI		;Set up to increment the pointers later

cblt11_5100:
	cmp	dx,1			;Move one word or many words?
	jz	cblt11_5120		;  Only one word

	mov	al,I_MOV_CX_WORD_I 	;  Many words, load count
	mov	ah,dl
	stosw
	mov	al,dh			;Set MSB of count
	mov	ah,I_REP		;  and a repeat instruction
	stosw

cblt11_5120:
	mov	ax,si			;Set the word instruction
	inc	ax
	stosb
	errnz	I_MOVSW-I_MOVSB-1	;The word form of the instruction
	errnz	I_STOSW-I_STOSB-1	;  must be the byte form + 1

	or	bx,bx			;Need to increment the pointers?
	jz	cblt11_5140		;  No

	mov	ax,bx			;  Yes, increment both pointers
	stosw

cblt11_5140:
	jmp	cblt11_6000		;Done setting up the innerloop
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	There is some count for the innerloop of the BLT.  Generate the
;	required BLT. Two or four copies of the BLT will be placed on the
;	stack.	 This allows the LOOP instruction at the end to be distributed
;	over two or four bytes instead of 1, saving 11 or 12 clocks for each
;	byte (for 4).  Multiply 12 clocks by ~ 16K and you save a lot of
;	clocks!
;
;	If there are less than four (two) bytes to be BLTed, then no looping
;	instructions will be generated.  If there are more than four (two)
;	bytes, then there is the possibility of an initial jump instruction
;	to enter the loop to handle the modulo n result of the loop count.
;
;	The innerloop code will look something like:
;
;
;	<	mov	cx,loopcount/n> ;load count if >n innerloop bytes
;	<	jmp	short ???     > ;If a first jump is needed, do one
;
;	BLTloop:
;		replicate initial byte BLT code up to n times
;
;	<	loop	BLTloop >	;Loop until all bytes processed
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


cblt11_5500:
	mov	bx,gl_store		;Compute size of the fetch code
	sub	bx,gl_fetch
	inc	bx			;A stosb will be appended
 IF 0 ;--no complex looping
	mov	si,4			;Assume replication 4 times
	mov	cl,2			;  (shift count two bits left)
	cmp	bx,32			;Small enough for 4 times?
	jc	cblt11_5520		;  Yes, replicate 4 times

	shr	si,1			;  No,	replicate 2 times
	dec	cx
 ELSE
	mov	si,1
	mov	cl,0
 ENDIF

cblt11_5520:
	cmp	dx,si			;Generate a loop?
	jle	cblt11_5540		;  No, just copy code

	mov	al,I_MOV_CX_WORD_I
	stosb				;mov cx,loopcount/n
	mov	ax,dx			;Compute loop count
	shr	ax,cl
	stosw

 IF 0 ;--no complex looping
	shl	ax,cl			;See if loopcount MOD n is 0
	sub	ax,dx
	jz	cblt11_5540		;Zero, no odd count to handle

	page
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	There is an odd portion of bytes to be processed.  Increment
;	the loop counter for the odd pass through the loop and then
;	compute the displacement for entering the loop.
;
;	To compute the displacement, subtract the number of odd bytes
;	from the modulus being used  (i.e. 4-3=1).  This gives the
;	number of bytes to skip over the first time through the loop.
;
;	Multiply this by the number of bytes for a logic sequence,
;	and the result will be the displacement for the jump.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


	inc	wptr [di-2]		;Not zero, adjust for partial loop
	add	ax,si			;Compute where to enter the loop at
	mul	bl
	mov	cx,ax

	mov	al,I_JMP_NEAR		;Stuff jump instruction
	stosb
	mov	ax,cx			;Stuff displacement for jump
	stosw
 ENDIF


;	Currently:	DX = loop count
;			SI = loop modulus
;			BX = size of one logic operation
;			DI --> next location in the loop

cblt11_5540:
	mov	cx,bx			;Set move count
	mov	bx,dx			;Set maximum for move
	cmp	bx,si			;Is the max > what's left?
	jle	cblt11_5560		;  No, just use what's left

	mov	bx,si			;  Yes, copy the max

cblt11_5560:
	sub	dx,si			;If dx > 0, then loop logic needed
	mov	si,gl_fetch		;--> fetch code to copy
	mov	ax,cx			;Save a copy of fetch length
	rep	movs bptr es:[di],es:[si]
	mov	si,di			;--> new source (and top of loop)
	sub	si,ax
	mov	bptr [di-1],I_STOSB
	dec	bl			;One copy has been made
	mul	bl			;Compute # bytes left to move
	mov	cx,ax			;Set move count
	rep	movs bptr es:[di],es:[si]
	sub	si,ax			;Restore pointer to start of loop

	page

;	The innermost BLT code has been created and needs the looping
;	logic added to it.  If there is any looping to be done, then
;	generate the loop code.  The code within the innerloop may be
;	greater than 126 bytes, so a LOOP instruction may not be used
;	in this case.

	or	dx,dx			;Need a loop?
	jle	cblt11_6000		;  No, don't generate one

	mov	bx,si			;Compute offset of loop
	sub	bx,di
	cmp	bx,2-127 		;Can this be a short label?
	jc	cblt11_5600		;  No, must make it a near jmp

	mov	al,I_LOOP
	mov	ah,bl
	sub	ah,2			;Bias offset by length of LOOP inst.
	stosw				;Set the loop instruction
	jmp	short cblt11_6000		;Go process the last byte code


cblt11_5600:
	mov	al,I_DEC_CX
	stosb
	mov	al,I_JZ
	mov	ah,3	;(jump over JMP_NEAR)
	stosw
	mov	al,I_JMP_NEAR
	stosb

	mov	ax,bx
	sub	ax,6			;Adjust jump bias
	stosw				;  and store it into jump



	subttl	Compile - Last Byte Processing
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	All the innerloop stuff has been processed.  Now generate the code for
;	the final byte if there is one.  This code is almost identical to the
;	code for the first byte except there will only be one fetch (if a
;	fetch is needed at all).
;
;	The code generated will look something like:
;
;	<	fetch		>	;Get source byte
;	<	align		>	;Align source if needed
;		action			;Perform desired action
;		mask and store
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

cblt11_6000:
	mov	dx,gl_final_mask		;Get last byte mask
;	 or	 dh	 ,dh
	or	dl,dl			;JAK Is there a last byte to be processed?
	jz	cblt11_6100		;  No.

 IF 0
	mov	cx,gl_endop		;Get end of fetch/logic/store operation
 ELSE
	mov	cx,gl_store
 ENDIF
	mov	si,gl_fetch		;Get start of fetch/logic sequence
	sub	cx,si			;Compute length of the code
	rep	movs bptr es:[di],es:[si]

 IF 0
	xchg	dh,dl
	mov	MASKED_STORE_MASK[di],dx ;Stuff last byte mask into the code
 ELSE

	mov	al,I_ES_OVERRIDE 	;Load destination in AH
	stosb
	mov	ax,I_MOV_AH_DEST
	stosw

	mov	al,I_AND_AX_WORD_I
	stosb
	mov	ax,gl_final_mask
;	 xchg	 ah,al			;JAK
	stosw

	mov	ax,I_OR_AL_AH
	stosw

	mov	al,I_STOSB
	stosb
 ENDIF
	subttl	Compile - Looping Logic
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Looping logic.
;
;	The looping logic must handle (huge or small) monochrome bitmaps,
;	and the presence or absence of a source or pattern.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;



	subttl	Looping Logic - Plane Selection
	page

;	Get saved parameters off of the stack.
;
;	<	pop	bx	      > ;Get plane indicator
;	<	pop	si	      > ;Get source pointer
;		pop	di		;Get destination pointer
;		pop	cx		;Get loop count


cblt11_6100:
	mov	bh,gl_flag0		;These flags will be used a lot

	test	bh,F0_SRC_PRESENT	;Is a source needed?
	jz	cblt11_6140		;  No

	mov	al,I_POP_SI		;  Yes, get source pointer
	stosb

cblt11_6140:
	mov	al,I_POP_DI		;Get destination pointer
	mov	ah,I_POP_CX		;and loop count
	stosw

	subttl	Looping Logic - Scan Line Update
	page

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
;	Generate the next scanline code.  The next scan line code must
;	handle monochrome bitmaps, the device, huge bitmaps, the presence
;	or absence of a source.
;
;	<	add si,gl_src.next_scan> ;Normal source scan line update
;	<	Huge Bitmap Update    > ;>64K source update code
;		add di,gl_dest.next_scan ;Normal destination scan line update
;	<	Huge Bitmap Update    > ;>64K destination update code
;
;
;	All updates will at least consist of the add IndexReg,plane_w.
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;


	test	bh,F0_SRC_PRESENT	;Is there a source?
	jz	cblt11_6340		;  No, skip source processing

	call	s_update 		;Generate the Y scan line update code

cblt11_6340:
	call	d_update 		;Generate the Y scan line update code



;	Compile the scan line loop.  The code simply jumps to the start
;	of the outer loop if more scans exist to be processed.


	mov	bx,off_gl_blt_addr	;Compute relative offset of
	sub	bx,di			;  start of loop
	cmp	bx,2-127 		;Can this be a short label?
	jc	cblt11_6400		;  No, must make it a near jmp

	mov	al,I_LOOP
	mov	ah,bl
	sub	ah,2			;Bias offset by length of LOOP inst.
	stosw				;Set the loop instruction
	jmp	short cblt11_6420

cblt11_6400:
	mov	al,I_DEC_CX
	stosb
	mov	al,I_JZ
	mov	ah,3	;(jump over JUMP_NEAR)
	stosw
	mov	al,I_JMP_NEAR
	stosb
	mov	ax,bx
	sub	ax,6			;Adjust jump bias
	stosw				;  and store it into jump

cblt11_6420:
	mov	al,I_RET_FAR		;Stuff the far return instruction
	stosb

	ret
cblt11	endp
